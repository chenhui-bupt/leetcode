3. 无重复字符的最长子串
https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/
（1）哈希记录每个字符的最新位置
（2）记录当前不重复字符的最新位置
（3）更新最长长度

4. 寻找两个正序数组的中位数
https://leetcode-cn.com/problems/median-of-two-sorted-arrays/
思路：
（0）二分查找
（1）取两数组第k小的数
（2）分别比较两数组第k/2个数的大小
（3）不断二分，直至边界条件

5. 最长回文子串
https://leetcode-cn.com/problems/longest-palindromic-substring/
思路：
（1）遍历字符串，分别以（i，i)和（i，i+1）为中心扩展回文子串
（2）比较，记录最长回文子串

8.字符串转数字，myAtoi
数据结构：字符串 + 哈希表
算法：有限状态机
思路：字符有四种状态”空格、符号、数字、其他“，构建状态转移表，表示各种状态之间的转移关系，相当于写了很多if else语句。当遇到新的字符时，根据上一个状态计算其转移状态，不同状态对应不同的动作，比如数字加和，符号识别，或者结束。

10.正则表达式匹配
https://leetcode-cn.com/problems/regular-expression-matching/
字符串s匹配包含'.', '*'的pattern
思路：
（1）递归回溯算法
（2) '*'匹配0次或多次
if p[index2 + 1] == '*' {
	if (s[index1] == p[index2] || p[index2] == '*') {
		return dfs(s, index1, p, index2 + 2) || dfs(s, index1 + 1, p, index2);
	} else {
		return dfs(s, index1, p, index2 + 2);
	}
}
（3）'.'匹配任意字符
if (s[index1] == p[index2] || p[index2] == '.') {
	return dfs(s, index1 + 1, p, index2 + 1);
}
最好string转成char*，可直接利用指针移位！！！

11. 盛最多水的容器
https://leetcode-cn.com/problems/container-with-most-water/
思路：
（1）双指针法，left = 0， right = n-1
（2）每次移动高度height较小的指针，计算面积
（3）得到最大面积

15. 三数之和
https://leetcode-cn.com/problems/3sum/
无重复三数之和
思路：
（1）排序 + 双指针
（2）预排序：因为需要无重复，进行预排序
（3）第一个数：第一层遍历，记作第一个数
（4）第二、三个数：第二层遍历，使用双指针，找到第二个、第三个数

17. 电话号码的字母组合
https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/
思路：
（1）dfs和bfs
（2）dfs深度优先递归调用
（3）bfs逐层拼接字母，直至最后一层；然后遍历输出

19、删除链表倒数第N个节点
https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/
思路：
（1）快慢指针
（2）因为有可能删除的第N个节点是头节点，因此需要有一个哑结点。

20. 有效的括号
https://leetcode-cn.com/problems/valid-parentheses/
思路：
（1）栈 或 左右括号的计数器（只能针对只有一种括号的场景）
（2）栈是左括号入栈，右括号进行比较
（3）计数器是左括号统计，右括号比较（并消灭对应左括号）

21. 合并两个有序链表
https://leetcode-cn.com/problems/merge-two-sorted-lists/
思路：
方法一：dfs
（1）边界条件：若l1为空，返回l2；l2为空，返回l1
（2）递归：若l1->val < l2->val，则l1->next = dfs(l1->next, l2);
（3）递归：否则l2->next = dfs(l1, l2->next);
方法二：迭代
（1）利用哑结点
（2）逐个比较，选择较小的节点，移动指针
（3）返回dummy->next

22. 括号生成
https://leetcode-cn.com/problems/generate-parentheses/
思路：
（0）dfs + 左右括号计数器
（1）边界条件：若生成的括号长度为2n时，放入结果中
（2）递归：当左括号小于n时，可以增加一个左括号
（3）递归：当右括号数小于左括号数时，可以增加一个右括号

23. 合并k个升序链表
https://leetcode-cn.com/problems/merge-k-sorted-lists/
思路：
（0）二分归并dfs，自底向上
（1）下标left，right得中间下标mid，递归mergeTwoList（merge(left, mid), merge(mid+1, right)); 注意边界条件
（2）迭代实现合并两个有序链表，如21题

31. 下一个排列
https://leetcode-cn.com/problems/next-permutation/
思路：
（1）下一个排列就是下一个较大的数
（2）首先，从右往左，找到当前肯定要升级的那个最小的数（即最左侧需要变动的数）
（3）然后，从右往左，找到比要升级的那个小数，略大一点的数（这个数要被升级到左侧，因此要选较大的，而不是最大的）
（4）将略大一点的数与待升级的数交换，就完成了左侧数字的升级
（5）同时将左侧之后的数字逆序，就得到下一个较大的数了。
特别的，如果当前排列数最大了，左侧待升级的最小的数，就是-1，则还是把左侧之后的数字逆序（即，重新排序了）

32. 最长有效括号
https://leetcode-cn.com/problems/longest-valid-parentheses/
思路：
（1）方法一：左右括号配对计数器，需要从左到右和从右到左各比较一遍
	当left == right时括号合法，长度为left + right
（2）方法二：栈，栈维护的当前最长有效括号的下标-1
当不合法时，右括号大于左括号的个数，此时栈为空，应当记录当前右括号的下标
合法时，右括号匹配左括号，此时长度为 i - st.top();
（3）方法三：动态规划，转移方程为，左右括号匹配时：
if (s[i] == ')' && s[i - dp[i-1] - 1] == '(') {
	dp[i] = dp[i - dp[i-1] - 2] + dp[i-1] + 2;
}

33. 搜索旋转排序数组
https://leetcode-cn.com/problems/search-in-rotated-sorted-array/
思路：
（1）二分查找，
（2）判断左右区间是否连续
（3）判断mid值是否存在与连续区间，分条件更新边界值

int search(vector<int>& nums, int target) {
	int left = 0;
	int right = nums.size() - 1;
	while (left <= right) {
		int mid = (left +right) >> 1;
		if (nums[mid] == target) {
			return mid;
		}
		if (nums[0] <= nums[mid]) {
			if (target >= nums[left] && target < nums[mid]) {
				right = mid - 1;
			} else {
				left = mid + 1;
			}
		} else {
			if (target > nums[mid] && target <= nums[right]) {
				left = mid + 1;
			} els {
				right = mid - 1;
			}
		}
	}
	return -1;
}

34. 在排序数组中找到元素的第一个位置和最后一个位置
https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/
思路：
（1）二分查找
（2）不同于一般的二分查找，当查到时并不退出循环，而是继续尽可能的往左或往右查找：
第一个位置：
if (nums[mid] >= target) {
	right = mid - 1;
} else {
	left = mid + 1;
}
return left < n ? left : -1;

最后一个位置：
if（nums[mid] <= target) {
	left = mid + 1;
} else {
	right = mid - 1;
}
return right >= 0 ? right : -1;
（3）判断正确性，然后返回起止下标

39. 组合总和
https://leetcode-cn.com/problems/combination-sum/
思路：
（1）dfs回溯算法

42. 接雨水
https://leetcode-cn.com/problems/trapping-rain-water/
思路：
（0）找到洼地
（1）暴力：向左看最大值和向右看最大值，min(left_max, right_max) - height[i]就是当前位置盛水的体积，累加。时间复杂度，O(n2)
（2）动态规划：维护每个位置向左看和向右看的最大值，然后计算当前位置盛水体积，累加。时间复杂度O(2n)
（3）栈（单调递减栈）：栈中元素维护的是洼地的左边界，当当前位置大于栈顶元素时，则栈顶元素是洼地，弹出，弹出后的栈顶元素是左边界，计算洼地位置的盛水体积，循环找出所有洼地和计算洼地体积。将当前元素（当前洼地右边界）放入栈中，即新的左边界更新入栈中。
（4）双指针：由动态规划可以看出，每个位置的盛水体积由左右方向的最大值left_max，right_max的较小值决定，并且left_max和right_max的更新由左右指针和当前位置数字的大小决定。（双指针，计算每个指针位置的盛水体积）

46。全排列
https://leetcode-cn.com/problems/permutations/
思路：
（1）dfs深度优先搜索，用状态位标识当前元素是否被使用（有点前缀和的感觉）


48. 旋转图像
https://leetcode-cn.com/problems/rotate-image/
思路：
（0）顺时针旋转，matrix[i][j] -> matrix[n-1-j][i]
（1）先水平上下翻转, swap(matrix[i][j], matrix[n-1-i][j]);
（2）再主对角线沿着x+y=n翻转， swap(matrix[i][j], matrix[j][i])，正好达到顺时针旋转的目的
两步不就行了？

49.字母异位词分组
https://leetcode-cn.com/problems/group-anagrams/
思路：
（1）为每个字符串进行“hash”
（2）方法一、将字符串排序
（3）方法二、记录字符及字符个数，然后序列化表示


53.最大子序和
https://leetcode-cn.com/problems/maximum-subarray/
思路：
（1）动态规划
（2）状态转移方程：
if (dp[i-1] < 0) {
	dp[i] = nums[i]
} else {
	dp[i] = dp[i-1] + num[i];
}
}


55. 跳跃游戏
https://leetcode-cn.com/problems/jump-game/
思路：
（1）遍历每一个位置，计算从这个位置能跳跃的最远距离，判定全局的最远距离是否能达到终点
（2）剪枝策略：
	（a) 当前能跳跃的最远距离，都达不到当前的位置，则提前判定跳跃失败
	（b) 当判定跳跃的最远距离，已经能到达终点时，直接返回成功

int jumpMost = 0;
for (int i = 0; i < nums.size(); ++i) {
	if (jumpMost < i) {
		return false;
	} else {
		jumpMost = max(jumpMost, nums[i] + i);
		if (jumpMost >= num.size() - 1) {
			return true;
		}
	}
}


56. 合并区间
https://leetcode-cn.com/problems/merge-intervals/
思路：
（1）贪心的解法，直接求解
（2）比较优雅的实现方式是：
vector<vector<int>> ans;
for (int i = 0; i < intervals.size(); ++i) {
	if (ans.empty() || ans.back()[1] < intervals[i][0]) {
		ans.push_back(intervals[i]);
	} else {
		ans.back()[1] = max(ans.back()[1], intervals[i][1]);
	}
}
return ans;

62.不同路径
https://leetcode-cn.com/problems/unique-paths/
思路：
（1）动态规划
（2）初始化
dp[0][j] = 1
dp[i][0] = 1;
（3）转移方程：
dp[i][j] = dp[i-1][j] + dp[i][j-1];

方法2：组合问题
其实就是从m+n-1步中，选出m-1步往下走

70. 爬楼梯
https://leetcode-cn.com/problems/climbing-stairs/
思路：
（1）斐波那契数列(动态规划)
（2）fn = f1 + f2

72. 编辑距离
https://leetcode-cn.com/problems/edit-distance/
插入、替换、删除操作
思路：
（1）动态规划
（2）初始化
dp[0][j] = j, j ∈ [0, n2]
dp[i][0] = i, i ∈ [0, n1]
（3）转移方程
if (s1[i-1] == s2[j-1]) {
	dp[i][j] = dp[i-1][j-1];
} else {
	dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1;
}
return dp[n1][n2];


75. 颜色分类
https://leetcode-cn.com/problems/sort-colors/
思路：
方法一：单指针
遍历，把0放在p0++位置上；再次遍历，把1放在p0++（即1放在0的后面）

方法二：双指针
p0 = 0; p2 = n-1;
遇见0放在p0++位置，遇见2放在p2--


76. 最小覆盖子串
https://leetcode-cn.com/problems/minimum-window-substring/
思路：
（1）双指针 + 哈希计数器
（2）哈希计数器：判别是否匹配覆盖
（2）双指针：右指针作为前进指针，左指针作为收缩指针。右指针前进更新计数器，左指针不断迁移，找寻最小的覆盖子串

78. 子集
https://leetcode-cn.com/problems/subsets/
思路：
（1）回溯dfs
（2）每次选择一个或者不选择，dfs树的深度正好是n，叶子节点个数2^n个，即是答案

79. 单词搜索
https://leetcode-cn.com/problems/word-search/
思路：
（1）回溯递归dfs
（2）外层遍历，匹配首字母
（3）调用dfs，匹配字符串，记录访问标志位, 当index == word.size() 返回true；


84.柱状图中的最大矩形
https://leetcode-cn.com/problems/largest-rectangle-in-histogram/
思路：
方法一：暴力解法-宽度，固定宽度，计算矩形的高度，计算面积
方法二：暴力解法-高度，固定高度，即每个位置的高度，向左右两边探寻边界，计算矩形的宽度，计算面积
方法三：单调栈 + 哨兵，参考暴力解法-高度，需要求解左右边界，这正是单调栈的工作；同时用两个数组分别存储位置i的左右两个哨兵
方法四：单调栈寻找的左边界的时候，同时发现当前位置是最后一个弹出位置的右边界


85.最大矩形
https://leetcode-cn.com/problems/maximal-rectangle/
思路：
（1）逐行遍历，更新每行上的柱状图高度，利用84题解法求解（单调栈 + 哨兵）


94. 二叉树中序遍历
https://leetcode-cn.com/problems/binary-tree-inorder-traversal/
思路：
方法一：深度优先搜索dfs
方法二：栈，用栈模拟递归调用过程。根据”左根右“的顺序，应当尽可能的将左节点入栈，直到左节点为空出栈，出栈后在转向处理右子节点
方法三：先导节点，根节点的先导节点是其左子树的最右叶子节点。根据左根右的顺序，当左节点为空时，根节点直接输出（此时根节点无先导节点），然后处理右节点；
当左节点不为空时，我们要找到左节点最右叶子节点作为根节点的先导节点，即p->right = root，若最优叶子节点已经绑定先导节点关系了，即p->right == root,
则需要输出根节点，并断开先导关系，此时根节点的左子树完全处理完成，转而处理右子数吧！


96.不同的二叉搜索树
https://leetcode-cn.com/problems/unique-binary-search-trees/
思路：
（1）动态规划
（2）定义：G(n)为序列长度为n的二叉搜索树的个数，F(i, n)为根节点为i序列长度为n的二叉搜索树个数
（3）初始化：G(0) = 1
（4）转移方程：G(n) = sum(F(i,n)), F(i, n) = G(i-1) * G(n-i)
所以：G(n) = sum_j∈(1, n) sum_i∈(1,j) G(i - 1) * G(j-i)
for (int j = 1; j <= n; ++j) {
	for (int i = 1; i <= j; ++i) {
		G[j] += G(i-1) * G(j - i);
	}
}
return G[n];


98. 验证二叉搜索树
https://leetcode-cn.com/problems/validate-binary-search-tree/
思路：
（1）方法一：递归，调用左右子树，调整每个子树的上下边界，判定合法性
（2）方法二：迭代法中序遍历，维护先序节点变量pre = -INT_MAX，判定合法性


101.对称二叉树
https://leetcode-cn.com/problems/symmetric-tree/
思路：
（1）dfs递归，dfs(root1, root2)
边界条件：
if (!root1 && !root2) {
	return true;
}
if (!root1 || !root2) {
	return false;
}
if (root1->val != root2->val) {
	return false;
}

return dfs(root1->left, root2->right) && dfs(root1->right, root2->left);

(2)层序遍历，队列每次弹出两个节点，判断是否相等；并且每次重复插入待校验的镜像节点


102. 二叉树的层序遍历
https://leetcode-cn.com/problems/binary-tree-level-order-traversal/
思路：
（1）队列

104.二叉树的最大深度
https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/
思路：
（1）bfs层序遍历，队列
（2）dfs递归

105.从前序遍历和中序遍历构造二叉树
https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/
思路：
（1）dfs
（2）从前序遍历获取根节点
（3）从中序分割左右子树
（4）递归调用


114.二叉树展开为链表
https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/
思路：
（1）本质是在根节点和右子节点之间插入左节点
（2）如果左节点不为空：维护先导节点（左子树的最右叶子节点），实现左子树与右子树的链接
（3）如果左节点为空：则右节点即是链表的下一个节点

121. 买卖股票的最佳时机
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/
思路：
（1）动态规划。只能买一次，并在未来卖一次
（2）初始化：支出buy = prices[0], 收益profit = 0
（3）转移方程：profit = max(profit, prices[i] - buy);
buy = min(buy, prices[i]);


124.二叉树中的最大路径和
https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/
思路：
（1）递归
（2）计算左右子树的路径和
（3) 当前节点的最大路径和 = left + right - root->val;
（4）返回左右子树最大的路径和即可

128. 最长连续子序列
https://leetcode-cn.com/problems/longest-consecutive-sequence/
思路：
（1）哈希
（2）第一次遍历，哈希存储数组元素
（3）第二次遍历，判断数字是否是一个序列的起点，即num - 1不存在，然后连续递增，判断数字是否存在数组中，
就可以得到序列的长度

136. 只出现一次的数字
https://leetcode-cn.com/problems/single-number/
思路：
（1）异或
（2）res ^= num; return res;

139. 单次拆分
https://leetcode-cn.com/problems/word-break/
思路：
（1）动态规划 + 哈希
（2）初始化：vector<bool> dp(size+1); dp[0] = true;
（3）转移方程：
if (dp[j] && wordDict.find(s.substr(j, i-j)) != wordDict.end()) {
	dp[i] = true;
	break;
}
return dp[s.size()];


141. 环形链表
https://leetcode-cn.com/problems/linked-list-cycle/
思路：
（1）快慢指针
（2）快慢指针找出环，再走一遍找出环的交点

142.环形链表2
https://leetcode-cn.com/problems/linked-list-cycle-ii/
思路：
（1）快慢指针
（2）快慢指针找出环，再走一遍找出环的交点

146.LRU缓存机制
https://leetcode-cn.com/problems/lru-cache/
思路：
（1）哈希表 + 双向链表
（2）get接口时，key存在，返回value，并将节点移到链表头部；不存在返回-1
（3）put接口时，key存在, 更新value，并将节点移到链表头部；不存在判断哈希表大小是否超限，移除尾部节点，哈希表删除索引，并在头部加入新节点
若未超限，直接在链表头部加入新节点

148. 排序链表
https://leetcode-cn.com/problems/sort-list/
思路：
（1）归并排序，快慢指针二分链表
（2）边界条件：
（a) 链表只剩一个节点，无需二分，直接返回（此时节点为二分后中间节点，记得将链表断开）
（b) 节点断开，可以自顶向下（麻烦，要维护中间节点的前一节点），也可以自底向上（即链表只剩一个节点时）


152. 乘积最大子数组
https://leetcode-cn.com/problems/maximum-product-subarray/
思路：
（1）动态规划
（2）初始化: dp_min = nums[0], dp_max = nums[0]
（3）转移方程：

155. 最小栈
https://leetcode-cn.com/problems/min-stack/
思路：
（1）两个栈
（2）一个栈放真实元素，一个栈是单调递减栈
（3）为了保持两个栈元素个数相同，当新元素大于当前单调栈栈顶元素时，则复制栈顶元素


160. 相交链表
https://leetcode-cn.com/problems/intersection-of-two-linked-lists/
思路：
（1）双指针
（2）当指针走到链表尾部时，交换链表
（3）两轮遍历还未找到相交节点，双指针均为空，退出循环
（4）找到相交节点，双指针相等，退出循环


169. 多数元素
https://leetcode-cn.com/problems/majority-element/
思路：
（1）哨兵
（2）用两个变量candidate和count分别记录当前的候选元素及候选元素的个数
（3）当遇到不同的元素时，count--；遇到相同的元素时，count++；
（4）采用抵消法，最终剩下的一定是超过n/2个数的元素

超过n/3个数的元素呢？？？
用两个变量计数器，每次消除三个不同的数字（不会影响问题的结果）


198.打家劫舍
https://leetcode-cn.com/problems/house-robber/
思路：
（1）动态规划
（2）初始化：dp[0] = nums[0]
（3）转移方程：dp[i] = max(dp[i-2] + nums[i], dp[i-1])
ans = max(ans, dp[i])


200.岛屿数量
https://leetcode-cn.com/problems/number-of-islands/
思路：
（1）bfs和dfs
（2）本质上是将遇到的每个岛屿的1变成0
（3）双层循环，宽度优先或者深度优先，去探寻岛屿


206.翻转链表
https://leetcode-cn.com/problems/reverse-linked-list/
思路：
（1）迭代 或 递归
（2）方法一：递归
ListNode* node = dfs(head->next);
head->next->next = head;
head->next = nullptr;
return node;

(3) 方法二：迭代
pre = nullptr;
cur = head;

迭代：
next = cur->next;
cur->next = pre;
pre = cur;
cur = next;

207. 课程表
思路：
（1）bfs，dfs
（2）bfs利用队列和入度信息，不断迭代
（3）dfs利用访问标志位，确保不会存在环


208. 前缀树
https://leetcode-cn.com/problems/implement-trie-prefix-tree/
思路：
（1）树
（2）假定双亲节点至多26个孩子节点，有即为对象指针，无即为空指针
（3）还要有个结尾标志位，为了是完全匹配


215.数组中第k大的元素
https://leetcode-cn.com/problems/kth-largest-element-in-an-array/
思路：
（1）快排 或者 堆排
（2）方法一：快排
先进行partition，确保左边的数都比右边的小
若patition的位置等于size-k，即找到结果
若小于size-k，则继续快排右边的数组；若大于size-k，则快排左边的数组
（2）方法二：堆排
构建堆，调整堆，排序

221.最大正方形
https://leetcode-cn.com/problems/maximal-square/
思路：
（1）动态规划
（2）初始化：
if (matrix[i][0] == '1') {
	dp[i][0] = 1;
}
if (matrix[0][j] == '1') {
	dp[0][j] = 1;
}
（3）转移方程
dp[i][j] = min(min(dp[i-1][j-1], dp[i-1][j]), dp[i][j-1]) + 1
or
dp[i][j] = 0

226. 翻转二叉树
https://leetcode-cn.com/problems/invert-binary-tree/
思路：
（1）dfs
（2）边界条件：
if (!root) {
	return nullptr;
}

234.回文链表
https://leetcode-cn.com/problems/palindrome-linked-list/
思路：
（1）翻转链表，快慢指针
（2）快慢指针二分，翻转链表，比较


236. 二叉树的公共祖先
https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/
思路：
（1）dfs
（2）如果找到p、q节点直接返回
（3）递归调用左右子树，若p，q节点分别存在于左右子树，则返回根节点；
若存在于左子树，则返回左子树移上来的节点；若存在于右子树，则返回右子树上移来的节点


238.除自身以外的数组
https://leetcode-cn.com/problems/product-of-array-except-self/
思路：
（1）双向遍历


239. 滑动窗口最大值
https://leetcode-cn.com/problems/sliding-window-maximum/
思路：
（1）优先队列 或者 前向最大值和后向最大值 或 单调递减队列（双向队列）
（2）方法一：优先队列
优先队列存储数字及其下标，当顶部元素下标无效时弹出，此时顶部元素即为滑窗内的最大值
（3）方法二：前向最大值和后向最大值
将数组按k窗口大小分组，计算每个分组内的前向、后向最大值
因为我们所求的是滑窗内的最大值，其必定等于上一个窗口期的后向最大值和下一个窗口期的前向最大值的较大者！！！
（4）方法三：单调递减双向队列


240.搜索二维矩阵
https://leetcode-cn.com/problems/search-a-2d-matrix-ii/
思路：
（1）左下角出发，大于目标值，向上搜寻；小于目标值向右搜寻


279.完全平方数
https://leetcode-cn.com/problems/perfect-squares/
思路：
（1）动态规划
（2）初始化：dp[i] = INT_MAX; dp[0] = 0;
（3）转移方程：
dp[i] = min(dp[i], dp[i - k^2])


283.移动零
https://leetcode-cn.com/problems/move-zeroes/
思路：
（1）双指针
（2）第一个指针负责遍历，找寻0后面第一个不为0的个数，第二个指针负责找寻第一个为0的数字，
当找到第一个0后面的数字时，即交换双指针对应的元素

														
287.寻找重复数
https://leetcode-cn.com/problems/find-the-duplicate-number/
思路：
方法一：原数组记录
（1）如何在不开辟新空间的前提下记录重复的数字？
（2）就要利用原始输入的数组，并且要求原数组上的数字“不被改变”！
（3）利用取余不变法
方法二：Floyd判圈算法（转成有环链表的题）
（1）对于每个位置上元素值都指向其对应下标的元素值，构建图，而重复的元素会指向同一个下标


297.二叉树的序列化与反序列化
https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/
思路：
（1）bfs和dfs
（2）利用好istringstream和ostringstream

300.最长递增子序列
https://leetcode-cn.com/problems/longest-increasing-subsequence/
思路：
（1）动态规划 or 贪心+二分
（2）方法一：动态规划
初始化：dp[i] = 1
转移方程：
if (nums[j] < nums[ip]) {
	dp[i] = max(dp[i], dp[j] + 1)
}

(3) 方法二：贪心 + 二分（单调数组，其对应的元素表示长度为i的序列末尾元素的最小值）
遍历，若当前元素大于数组末尾元素，则直接添加；若小于，则找到数组中大于当前元素的最小数，并替换


301. 删除无效的括号数
https://leetcode-cn.com/problems/remove-invalid-parentheses/
思路：
（1）什么是无效？+ dfs
（2）预先统计待删除的左右括号数！
（3）执行删除或保留策略！

309. 最佳买卖股票时机含冷冻期
https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/
思路：
（1）动态规划
（2）初始值：
（3）dp[i] = {买入，卖出，冷冻}
dp[i][0] = max(dp[i-1][2] - nums[i], nums[i]);
dp[i][1] = nums[i] - dp[i-1][0];
dp[i][2] = dp[]


312.戳气球
https://leetcode-cn.com/problems/burst-balloons/
思路：
（1)	记忆化搜索 或 动态规划
（2）方法一：记忆化搜索
每次戳破一个气球，左右两个气球变成相邻，很难处理这种动态问题，我们将这个问题逆过来，
每次在两个气球中间放入一个气球，其“相邻”关系不变，并利用分治思想处理此类问题。
dfs(i, j) = val[i] * val[mid] * val[j] + dfs(i, mid) + dfs(mid + j)
最后利用记忆化，减少重复计算
（3）方法二：动态规划
由方法一看出，该题存在可迭代的转移方程:
dp[i][j] = val[i] * val[mid] * val[j] + dp[i][mid] + dp[mid][j]


322. 零钱兑换
https://leetcode-cn.com/problems/coin-change/
思路：
（1）动态规划
（2）初始化：
dp[i] = -1 // 表示没有任合组合
dp[0] = 0;
（3）转移方程
for (int j : coins) {
	if (i >= j && dp[i-j] != -1) {
		if (dp[i] == -1) {
			dp[i] = dp[i-j] + 1;
		} else {
			dp[i] = min(dp[i], dp[i-j] + 1);
		}
	}
}
return dp[amount];


337. 打家劫舍III
https://leetcode-cn.com/problems/house-robber-iii/
思路：
（1）递归dfs，借鉴”打家劫舍“动态规划的思想
（2）相邻的两个房间不能同时被打劫，即只能打劫当前房间和其孩子节点的孩子房间，或者打劫孩子房间。
是不是类似dp[i] = max(dp[i-2] + nums[i], dp[i-1])
（3）所以dfs每次返回打劫当前节点，和 打劫孩子节点的数据就行

338. 比特位计数
https://leetcode-cn.com/problems/counting-bits/
思路：
（1）方法很多，最重要的是找到其递归关系
（2）方法一：Brian 算法
 x &= (x - 1);
 (3)方法二：最低设置位
 ans[x] = ans[x & (x - 1)] + 1
 (4) 方法三：最低有效位
 ans[x] = ans[x >> 1] + x & 0x01;
 (5) 方法四：最高有效位
 if (x & (x - 1) == 0) {
 	hightBit = x;
 }
 ans[x] = ans[x - highBit] + 1;


347.前k个高频元素
https://leetcode-cn.com/problems/top-k-frequent-elements/
思路：
（1）哈希表 + 堆排（优先队列）或 快排
（2）哈希表用于计数，堆排或快排用于选取第K大的元素


394.字符串解码
https://leetcode-cn.com/problems/decode-string/
思路：
（1）栈或递归
（2）方法一：栈
（a) 遇到数字，则把连续数字读出，入栈
（b) 遇到字母或左括号，入栈
（c) 遇到右括号，将字符串出栈，直到遇到左括号；将字符串逆序拼接，
（d) 先将左括号出栈，再将重复数字出栈，复制拼接后的字符串入栈
（e) 继续遍历

（3）方法二：递归
（a) 边界条件，字符串结束或遇到右括号，返回 "";
（b) 遇到数字，则把连续数字读出，跳过左括号，递归调用；然后将递归调用的结果复制n份，最后再递归调用解析右括号右边的内容，并拼接字符串。
（c) 遇到字母，则把当前字符串 与 递归调用结果拼接。


399. 除法求值
https://leetcode-cn.com/problems/evaluate-division/
思路：
（1）方法一：宽度优先搜索
（2）方法二：Floyd算法
（3）方法三：并查集

方法一：
（a) 节点编码
（b) 构建边的关系和权值
（c) 宽度优先搜索，找寻节点ia，ib之间的链路，权值相乘即是答案

方法二：
（a) 节点编码
（b) 构建有向有权图
（c) 预处理图，得到每对节点的权值
（d) 查询，输出答案

方法三：
（a) 节点编码
（b) 构建并查集（压缩路径）
（c) 查询（查询的过程也在压缩路径）


406. 根据身高重建队列
https://leetcode-cn.com/problems/queue-reconstruction-by-height/
思路：
（1）方法一：从低到高
（a) 先从低到高排序，身高相同时，人数倒序排列
（b) 然后根据前面需要高的身高人数，预留空位置；不需考虑空位置是否连续，遇到有人顺延即可

（2）方法二：从低到高
（a) 先从高到底排序，身高相同时，人数顺序排列
（b) 根据前面所需高的身高人数，在指定（下标）出插入一个人


416.分割等和子集
https://leetcode-cn.com/problems/partition-equal-subset-sum/
思路：
（1）0-1背包问题，动态规划
（2）边界条件：数组元素小于两个，数组和是奇数，数组最大值大于数组和的一半
（3）定义dp[i][j]表示前i个数字前面能组合出和为j的数，所以dp[i][0] = true;
（4）对于当前元素nums[i]可以选取也可以不选取：
if (nums[i] <= j) {
	dp[i][j] = dp[i-1][j] | dp[i-1][j - nums[i]];
} else {
	dp[i][j] = dp[i-1][j];
}


437. 路径总和III
https://leetcode-cn.com/problems/path-sum-iii/
思路：
（1）哈希前缀和 + dfs
（2）递归调用，维护前缀和（key是前缀和，value是个数），递归调用结束后，回滚前缀和哈希
（3）当存在前缀和curSum - target时，答案 += cnt；当节点为空时，退出递归


438. 找出所有字符串中字母异位词
https://leetcode-cn.com/problems/find-all-anagrams-in-a-string/
思路：
（1）滑窗 + 贪心
（2）统计窗口内字符的个数，如果跟目标字符串一致，则答案记录起始左边界
（3）滑动窗口



448. 寻找消失的数字
咋感觉好像寻找重复的数字呢？
https://leetcode-cn.com/problems/find-all-numbers-disappeared-in-an-array/
思路：
（1）不让使用额外空间，只能修改原数组了
（2）遍历数组，在数字对应的下标元素 +（n+1）
（3）这样遍历后依然小于n+1的位置，即是消失的数。


461。汉明距离
https://leetcode-cn.com/problems/hamming-distance/
思路：
（1）异或
（2）计算二进制1的个数


494.目标和
https://leetcode-cn.com/problems/target-sum/
思路：
（1）前i个数能否组成和为 (tsum - target)/2的问题
（2）因为有正负，我们将问题转化成求目标(tsum - target)/2的问题就行，即满足和为(tsum - target)/2前面为 ‘-’号，其他数字前面为‘+’


538. 把二叉搜索树换成累加树 
https://leetcode-cn.com/problems/convert-bst-to-greater-tree/
思路:
(1) 逆中序遍历 + dfs


543. 二叉树直径
https://leetcode-cn.com/problems/diameter-of-binary-tree/
思路：
（1）dfs或bfs


560. 和为k的子数组
https://leetcode-cn.com/problems/subarray-sum-equals-k/
思路：
（1）前缀和哈希表



581. 最短无序连续子数组
https://leetcode-cn.com/problems/shortest-unsorted-continuous-subarray/
思路：
（1）贪心
（2）从左往右找出转折点的最小数；从右往左找出转折点的最大数
（3）从左往右再次遍历，第一个大于转折点的最小数为左边界；
（4）从右往左再次遍历，第一个小于转折点的最大数为右边界


617. 合并二叉树
https://leetcode-cn.com/problems/merge-two-binary-trees/
思路：
（1）dfs



