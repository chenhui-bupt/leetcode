/*
算法一：循环移位法，简单直接，时间复杂度O(n)，空间复杂度O(1)
算法二：位分治法，在最底层左右两位交换，即奇偶位交换；在第二层，左右两对交换，即奇数组和偶数组交换；
在顶层左十六位与右十六位交换。因此共需要交换5次（log32）
*/
class Solution {
public:

    // 算法一：循环法
    uint32_t reverseBits(uint32_t n) {
        uint32_t res = 0;
        for (int i = 0; i < 32 && n > 0; ++i) {
            res |= (n & 1) << (31 - i); // 倒序移至首位
            n = n >> 1;
        }
        return res;
    }

    // 算法二：分治法
    uint32_t reverseBits(uint32_t n) {
        const uint32_t M1 = 0x55555555; // 底层掩码01010101010101010101010101010101
        const uint32_t M2 = 0x33333333; // 二层掩码00110011001100110011001100110011
        const uint32_t M4 = 0x0F0F0F0F; // 三层掩码00001111000011110000111100001111
        const uint32_t M8 = 0x00FF00FF; // 四层掩码00000000111111110000000011111111
        n = ((n >> 1) & M1) | ((n & M1) << 1); // 奇偶位互换
        n = ((n >> 2) & M2) | ((n & M2) << 2); // 奇偶对互换
        n = ((n >> 4) & M4) | ((n & M4) << 4); // 奇偶四互换
        n = ((n >> 8) & M8) | ((n & M8) << 8); // 奇偶八互换
        n = (n >> 16) | (n << 16); // 奇偶十六互换，这里有没有M16掩码都是等效的
        return n;    
    }
};